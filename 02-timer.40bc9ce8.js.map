{"mappings":"AAAA,MAAMA,EAAWC,SAASC,cAAc,gBAClCC,EAAWF,SAASC,cAAc,eAClCE,EAAYH,SAASC,cAAc,gBACnCG,EAAaJ,SAASC,cAAc,kBACpCI,EAAcL,SAASC,cAAc,kBAErCK,EAAQN,SAASC,cAAc,UAC/BM,EAAQP,SAASQ,iBAAiB,UAClCC,EAAcT,SAASQ,iBAAiB,UAC9CE,QAAQC,IAAIF,GACZH,EAAMM,MAAMC,QAAU,OACtBN,EAAM,GAAGK,MAAMC,QAAU,OACzBJ,EAAY,GAAGG,MAAME,SAAW,OAChCP,EAAM,GAAGK,MAAMG,cAAgB,SAC/BR,EAAM,GAAGK,MAAMI,WAAa,SAC5BT,EAAM,GAAGK,MAAMK,YAAc,OAE7BV,EAAM,GAAGK,MAAMC,QAAU,OACzBJ,EAAY,GAAGG,MAAME,SAAW,OAChCP,EAAM,GAAGK,MAAMG,cAAgB,SAC/BR,EAAM,GAAGK,MAAMI,WAAa,SAC5BT,EAAM,GAAGK,MAAMK,YAAc,OAE7BV,EAAM,GAAGK,MAAMC,QAAU,OACzBJ,EAAY,GAAGG,MAAME,SAAW,OAChCP,EAAM,GAAGK,MAAMG,cAAgB,SAC/BR,EAAM,GAAGK,MAAMI,WAAa,SAC5BT,EAAM,GAAGK,MAAMK,YAAc,OAE7BV,EAAM,GAAGK,MAAMC,QAAU,OACzBJ,EAAY,GAAGG,MAAME,SAAW,OAChCP,EAAM,GAAGK,MAAMG,cAAgB,SAC/BR,EAAM,GAAGK,MAAMI,WAAa,SAE5BjB,EAASmB,iBAAiB,SAwB1B,SAAiBC,GACf,IAAIC,EAAO,IAAIC,KACfD,EAAOA,EAAKE,UAEZ,IAAIC,EAAWC,EAAWF,UAAYF,EAElCK,EAAUC,aAAY,KACxBH,GAAsB,IACtBI,EAkBJ,SAAmBC,GAEjB,MAAMC,EAAS,IACTC,EAAkB,GAATD,EACTE,EAAgB,GAATD,EACPE,EAAa,GAAPD,EAGNE,EAAOC,EAAIC,KAAKC,MAAMR,EAAKI,IAE3BK,EAAQH,EAAIC,KAAKC,MAAMR,EAAMI,EAAOD,IAEpCO,EAAUJ,EAAIC,KAAKC,MAAMR,EAAOI,EAAOD,EAAQD,IAE/CS,EAAUL,EAAIC,KAAKC,MAAMR,EAAQI,EAAOD,EAAQD,EAAUD,IAEhE,MAAO,C,KAAEI,E,MAAMI,E,QAAOC,E,QAASC,E,CAlClBC,CAAUjB,GAWvBrB,EAASuC,YAAcd,EAASM,KAChC/B,EAASuC,YAAcd,EAASM,KAChC9B,EAAUsC,YAAcd,EAASU,MACjCjC,EAAWqC,YAAcd,EAASW,QAClCjC,EAAYoC,YAAcd,EAASY,QAbjCxC,EAAS2C,UAAW,EAEhBnB,GAAY,KACdoB,cAAclB,EAAQ,GAEvB,I,IAtCL1B,EAAS2C,UAAW,EACpB,MAAME,EAAcvB,KAAKwB,MAEnBC,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAI5B,KACjB6B,gBAAiB,EACjBC,QAAQC,GACYR,EAAcQ,EAAc,IAC7B,EACfC,OAAOC,MAAM,sCACRvD,EAAS2C,UAAW,C,EAE7Ba,SAASH,GACP5B,EAAa4B,EAAc,GAC3B1C,QAAQC,IAAIa,E,GAGhBgC,UAAU,mBAAoBV,GAC9B,IAAItB,EAAa,GACbG,EAAW,KA+Cf,SAASO,EAAIuB,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I","sources":["src/js/02-timer.js"],"sourcesContent":["const startBtn = document.querySelector('[data-start]');\nconst dayValue = document.querySelector('[data-days]');\nconst hourValue = document.querySelector('[data-hours]');\nconst minutValue = document.querySelector('[data-minutes]');\nconst secondValue = document.querySelector('[data-seconds]');\n\nconst timer = document.querySelector('.timer');\nconst field = document.querySelectorAll('.field');\nconst numberValue = document.querySelectorAll('.value');\nconsole.log(numberValue);\ntimer.style.display = 'flex';\nfield[0].style.display = 'flex';\nnumberValue[0].style.fontSize = '37px';\nfield[0].style.flexDirection = 'column';\nfield[0].style.alignItems = 'center';\nfield[0].style.marginRight = '10px';\n\nfield[1].style.display = 'flex';\nnumberValue[1].style.fontSize = '37px';\nfield[1].style.flexDirection = 'column';\nfield[1].style.alignItems = 'center';\nfield[1].style.marginRight = '10px';\n\nfield[2].style.display = 'flex';\nnumberValue[2].style.fontSize = '37px';\nfield[2].style.flexDirection = 'column';\nfield[2].style.alignItems = 'center';\nfield[2].style.marginRight = '10px';\n\nfield[3].style.display = 'flex';\nnumberValue[3].style.fontSize = '37px';\nfield[3].style.flexDirection = 'column';\nfield[3].style.alignItems = 'center';\n\nstartBtn.addEventListener(`click`, onClick);\nstartBtn.disabled = true;\nconst currentDate = Date.now();\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const deltaTime = currentDate - selectedDates[0];\n    if (deltaTime >= 0) {\n      window.alert('Please choose a date in the future');\n    } else startBtn.disabled = false;\n  },\n  onChange(selectedDates) {\n    pickedTime = selectedDates[0];\n    console.log(pickedTime);\n  },\n};\nflatpickr('#datetime-picker', options);\nlet pickedTime = '';\nlet leftTime = null;\n\nfunction onClick(evt) {\n  let date = new Date();\n  date = date.getTime();\n\n  let timeLeft = pickedTime.getTime() - date;\n\n  let timerId = setInterval(() => {\n    timeLeft = timeLeft - 1000;\n    leftTime = convertMs(timeLeft);\n    inputTime();\n    startBtn.disabled = true;\n\n    if (timeLeft <= 999) {\n      clearInterval(timerId);\n    }\n  }, 1000);\n}\n\nfunction inputTime() {\n  dayValue.textContent = leftTime.days;\n  dayValue.textContent = leftTime.days;\n  hourValue.textContent = leftTime.hours;\n  minutValue.textContent = leftTime.minutes;\n  secondValue.textContent = leftTime.seconds;\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = pad(Math.floor(ms / day));\n  // Remaining hours\n  const hours = pad(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["$40d383fb392a7037$var$startBtn","document","querySelector","$40d383fb392a7037$var$dayValue","$40d383fb392a7037$var$hourValue","$40d383fb392a7037$var$minutValue","$40d383fb392a7037$var$secondValue","$40d383fb392a7037$var$timer","$40d383fb392a7037$var$field","querySelectorAll","$40d383fb392a7037$var$numberValue","console","log","style","display","fontSize","flexDirection","alignItems","marginRight","addEventListener","evt","date","Date","getTime","timeLeft","$40d383fb392a7037$var$pickedTime","timerId","setInterval","$40d383fb392a7037$var$leftTime","ms","second","minute","hour","day","days","$40d383fb392a7037$var$pad","Math","floor","hours","minutes","seconds","$40d383fb392a7037$var$convertMs","textContent","disabled","clearInterval","$40d383fb392a7037$var$currentDate","now","$40d383fb392a7037$var$options","enableTime","time_24hr","defaultDate","minuteIncrement","onClose","selectedDates","window","alert","onChange","flatpickr","value","String","padStart"],"version":3,"file":"02-timer.40bc9ce8.js.map"}